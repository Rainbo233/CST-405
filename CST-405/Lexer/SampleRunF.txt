ethan@ethan-VirtualBox:~/opengl1/301$ flex lexer.l
ethan@ethan-VirtualBox:~/opengl1/301$ gcc -o lexer lex.yy.c
ethan@ethan-VirtualBox:~/opengl1/301$ ./lexer testcase.cmm
Compiler started. 

char : TYPE
global : IDENTIFIER
; : SEMICOLON
int : TYPE
array1 : IDENTIFIER
[ : Lbracket_OP
5 : NUMBER
] : Rbracket_OP
; : SEMICOLON
int : TYPE
max : IDENTIFIER
( : Lparenthesis_OP 
int : TYPE
array2 : IDENTIFIER
[ : Lbracket_OP
] : Rbracket_OP
, : comma 
int : TYPE
size : IDENTIFIER
) : Rparenthesis_OP
{ : LcurlyBraket_OP
int : TYPE
large : IDENTIFIER
; : SEMICOLON
int : TYPE
i : IDENTIFIER
; : SEMICOLON
i : IDENTIFIER
= : equal_OP
0 : NUMBER
; : SEMICOLON
large : IDENTIFIER
= : equal_OP
array2 : IDENTIFIER
[ : Lbracket_OP
0 : NUMBER
] : Rbracket_OP
; : SEMICOLON
while : KEYWORD
( : Lparenthesis_OP 
i : IDENTIFIER
< : Lessthan_OP
size : IDENTIFIER
) : Rparenthesis_OP
{ : LcurlyBraket_OP
If : IDENTIFIER
( : Lparenthesis_OP 
large : IDENTIFIER
< : Lessthan_OP
array2 : IDENTIFIER
[ : Lbracket_OP
i : IDENTIFIER
] : Rbracket_OP
) : Rparenthesis_OP
large : IDENTIFIER
= : equal_OP
array2 : IDENTIFIER
[ : Lbracket_OP
i : IDENTIFIER
] : Rbracket_OP
; : SEMICOLON
else : KEYWORD
; : SEMICOLON
} : RcurlyBraket_OP
return : IDENTIFIER
large : IDENTIFIER
; : SEMICOLON
} : RcurlyBraket_OP
int : TYPE
main : IDENTIFIER
( ) : doubleparenthesis_op 
{ : LcurlyBraket_OP
int : TYPE
step : IDENTIFIER
; : SEMICOLON
global : IDENTIFIER
= : equal_OP
34 : NUMBER
; : SEMICOLON
read : KEYWORD
step : IDENTIFIER
; : SEMICOLON
write : KEYWORD
global : IDENTIFIER
; : SEMICOLON
writeln : IDENTIFIER
; : SEMICOLON
write : KEYWORD
step : IDENTIFIER
; : SEMICOLON
step : IDENTIFIER
= : equal_OP
global : IDENTIFIER
+ : addition_OP
2 : NUMBER
* : multiplication_OP
3 : NUMBER
; : SEMICOLON
int : TYPE
j : IDENTIFIER
= : equal_OP
0 : NUMBER
; : SEMICOLON
while : KEYWORD
( : Lparenthesis_OP 
1 : NUMBER
) : Rparenthesis_OP
{ : LcurlyBraket_OP
array1 : IDENTIFIER
[ : Lbracket_OP
j : IDENTIFIER
] : Rbracket_OP
= : equal_OP
j : IDENTIFIER
+ : addition_OP
1 : NUMBER
; : SEMICOLON
j : IDENTIFIER
= : equal_OP
j : IDENTIFIER
+ : addition_OP
1 : NUMBER
; : SEMICOLON
if : KEYWORD
( : Lparenthesis_OP 
j : IDENTIFIER
== : OP
5 : NUMBER
) : Rparenthesis_OP
break : KEYWORD
; : SEMICOLON
else : KEYWORD
writeln : IDENTIFIER
; : SEMICOLON
} : RcurlyBraket_OP
step : IDENTIFIER
= : equal_OP
max : IDENTIFIER
( : Lparenthesis_OP 
array1 : IDENTIFIER
, : comma 
5 : NUMBER
) : Rparenthesis_OP
; : SEMICOLON
write : KEYWORD
step : IDENTIFIER
; : SEMICOLON
return : IDENTIFIER
0 : NUMBER
; : SEMICOLON
} : RcurlyBraket_OP
ethan@ethan-VirtualBox:~/opengl1/301$ 